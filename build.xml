<?xml version="1.0"?>

<!--

This is the ANT build file for OpenDCS 6.7 RC02 and Later.
The intent is that this will eventually be replaced with a Maven pom.xml.

To get started run

ant test


This will verify that everything can compile and tests can run

NOTE at this time jdk8 must be used as there is still a dependency on tools.jar

-->



<project name="OPENDCS Toolkit" default="jar" basedir="."
	
    >
	<description>Open DCS</description>

	<property environment="env"/>

	<!-- Settable Directories -->	
	<property name="project.dir" value="${basedir}"/>	
	<property name="dcpmon.dir" value="not merged in yet"/>
	<property name="hydrojson.dir" value="not merged in yet"/>
	<property name="src.dir" value="${project.dir}/src/main/java"/>
	<property name="src.test.dir" value="${project.dir}/src/test/java"/>
	<property name="resources.dir" value="${project.dir}/src/main/resources"/>

	<!-- Directories -->	
	<property name="build.dir" value="${basedir}/build"/>
	<property name="build.classes" value="${build.dir}/classes"/>
	<property name="build.lib" value="${build.dir}/lib"/>
	<property name="build.test.classes" value="${build.dir}/test-classes"/>
	<property name="build.test.lib" value="${build.dir}/test-libs"/>
	<property name="dist.jar" value="${build.lib}/opendcs.jar"/>		

	<!-- VERSION NUMBERS -->
	<property name="MAJ_VER" value="7"/>
	<property name="MIN_VER" value="1"/>
	

	<taskdef name="junitlauncher" classname="org.apache.tools.ant.taskdefs.optional.junitlauncher.confined.JUnitLauncherTask"
		classpath="${project.dir}/lib/ant-junitlauncher-1.10.12.jar"/>

    <include file="common.xml"/>	

	<loadfile property="RCNUM" srcFile="${project.dir}/rcnum.txt">
		<filterchain><striplinebreaks/></filterchain>
	</loadfile>
	<echo message="RCNUM=${RCNUM}"/>

	<property name="version" value="${MAJ_VER}.${MIN_VER}.${RCNUM}"/>
	<echo message="VERSION=${version}"/>
	
	

	<target name="izpack.dependencies" depends="common.resolve">		
		<taskdef name="izpack" classname="com.izforge.izpack.ant.IzPackTask" classpathref="izpack.classpath"/>
	</target>
	
	
	
<!-- depends="clean" -->
	<target name="prepare"  description="Makes build environment.">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.classes}"/>
		<mkdir dir="${build.lib}"/>
	</target>

	<target name="clean" description="Removes all generated files.">
		<delete dir="${build.dir}"/>
		<delete dir="stage"/>
		<delete>
 			<fileset dir="." includes="opendcs-*-unix-install.tgz"/>
            <fileset dir="." includes="opendcs-src-*.tgz"/>
            <fileset dir="." includes="opendcs-cwms-*.tgz"/>
		</delete>
		<delete dir="combined-src"/>
	</target>

	<target name="compile" depends="prepare,common.resolve"
		description="Compiles all source code.">

		<!-- create build date -->
		<tstamp>
			<format property="buildDate" pattern="MMM dd, yyyy"/>
		</tstamp>

		<copy todir="${build.classes}/lrgs/nledit">
			<fileset dir="${src.dir}/lrgs/nledit">
				<include name="*.gif"/>
			</fileset>
		</copy>

		<delete file="${build.classes}/lrgs/gui/LrgsBuild.class"/>
        <copy file="${src.dir}/lrgs/gui/LrgsBuild.java"
              tofile="${build.classes}/lrgs/gui/LrgsBuild.java"
              overwrite="true">
            <filterset>
				<filter token="VERSION" value="${version}"/>
                <filter token="DATE" value="${buildDate}" />
                <filter token="RCNUM" value="${RCNUM}" />
            </filterset>
        </copy>
		<javac debug="true" destdir="${build.classes}"
			target="1.7" source="1.7"
			includeantruntime="true"
			includes="lrgs/gui/LrgsBuild.java">
			<src path="${build.classes}"/>			
            <classpath refid="runtime.classpath"/>
		</javac>

		<javac debug="true" destdir="${build.classes}"
			target="1.7" source="1.7"
			includeantruntime="true"
			includes="decodes/**,ilex/**,lrgs/**,lritdcs/**,opendcs/**,covesw/**">
			<src path="${src.dir}"/>			
            <classpath refid="runtime.classpath"/>
		</javac>

	</target>

	<target name="compile-test" depends="compile,common.resolve">
		<mkdir dir="${build.test.classes}"/>
		<javac debug="true" destdir="${build.test.classes}"
			target="1.8" source="1.8" includeantruntime="false"
		>
			<src path="${src.test.dir}"/>
			<classpath>
				<pathelement location="${build.classes}"/>
                <path refid="runtime.classpath"/>
                <path refid="test.classpath"/>
			</classpath>			
		</javac>

	</target>

	<target name="test" depends="compile-test">
		<pathconvert property="platform_path" refid="junit.platform.libs.classpath"/>
		<echo message="platform path: ${platform_path}"/>
		<mkdir dir="${build.dir}/test-results"/>
		<junitlauncher haltOnFailure="true" printSummary="true">
			<classpath refid="test.classpath"/>
            <classpath refid="runtime.classpath"/>
            <classpath refid="junit.platform.libs.classpath"/>
            <classpath>
                <pathelement location="${build.test.classes}"/>
                <pathelement location="${build.classes}"/>
            </classpath>
           
			<testclasses outputdir="${build.dir}/test-results">
				<!-- <fork dir="${build.dir}"/>-->
				<fileset dir="${build.test.classes}"/>
				<listener type="legacy-brief" sendSysOut="true"/>
                <listener type="legacy-xml" sendSysErr="true" sendSysOut="true"/>                
			</testclasses>
            
		</junitlauncher>
	</target>

	<target name="jar" depends="compile" description="Generates opendcs.jar.">

		<!-- copy the resource files to the build directory. -->
		<copy todir="${build.classes}/decodes/resources">
    		<fileset dir="${resources.dir}/decodes/resources"/>
		</copy>
		<copy todir="${build.classes}/ilex/resources">
    		<fileset dir="${resources.dir}/ilex/resources"/>
		</copy>

		<!-- AW_AlgorithmTemplate.java needed by Algorithm Editor. -->
		<copy todir="${build.classes}/decodes/tsdb/algo">
			<fileset dir="${src.dir}/decodes/tsdb/algo">
				<include name="AW_AlgorithmTemplate.java"/>
			</fileset>
		</copy>

		<jar jarfile="${dist.jar}"
		     basedir="${build.classes}"
			 update="true"/>
	</target>

	<target name="all" depends="clean,jar"
		description="Cleans, compiles, and builds the distrubtion Jar file."/>
	
	<!-- Builds staging area for IzPack Installer -->
	<target name="stage" depends="jar,common.resolve">	
		<mkdir dir="stage"/>
		<mkdir dir="stage/doc"/>
		<mkdir dir="stage/netlist"/>
		<touch file="stage/netlist/empty.nl"/>
		<mkdir dir="stage/icons"/>
		<mkdir dir="stage/bin"/>
		<mkdir dir="stage/dep"/>		
		<mkdir dir="stage/dep/Lib"/>
		<mkdir dir="stage/examples"/>
		<mkdir dir="stage/python"/>
		<mkdir dir="stage/poll"/>

		<!-- build the sample database -->
		<mkdir dir="stage/edit-db"/>
		<mkdir dir="stage/edit-db/config"/>
		<mkdir dir="stage/edit-db/datasource"/>
		<mkdir dir="stage/edit-db/datatype"/>
		<mkdir dir="stage/edit-db/enum"/>
		<mkdir dir="stage/edit-db/equipment"/>
		<mkdir dir="stage/edit-db/eu"/>
		<mkdir dir="stage/edit-db/netlist"/>
		<mkdir dir="stage/edit-db/platform"/>
		<mkdir dir="stage/edit-db/presentation"/>
		<mkdir dir="stage/edit-db/routing"/>
		<mkdir dir="stage/edit-db/site"/>
		<mkdir dir="stage/schema"/>
		<mkdir dir="stage/schema/cwms"/>
		<mkdir dir="stage/schema/hdb"/>
		<mkdir dir="stage/schema/opendcs-pg"/>
		<mkdir dir="stage/schema/opendcs-oracle"/>
		<mkdir dir="stage/schema/noaa"/>

		<copy todir="stage/edit-db">
			<fileset dir="${project.dir}/install/edit-db">
				<include name="**/*.xml"/>
			</fileset>
		</copy>

		<copy todir="stage/icons">
			<fileset dir="${project.dir}/install/icons"/>
		</copy>
		<tar destfile="stage/icons.tar.gz" compression="gzip">
			<tarfileset dir="stage" includes="icons/**">
			</tarfileset>
		</tar>

		<copy todir="stage/bin">
			<fileset dir="${project.dir}/install/bin"/>
			<fileset dir="build/lib">
				<include name="opendcs.jar"/>
			</fileset>
		</copy>
        
		<copy todir="stage/dep">
			<mappedresources enablemultiplemappings="false">
				<!-- tweak to load at end as LoboBrowser here is including it's own jooq libaries for some reason breaking CWMS use-->
				<restrict>
					<path refid="runtime.classpath"/>
					<type type="file"/>
				</restrict>
				<chainedmapper>
					<flattenmapper/>
					<regexpmapper from="^(LoboBrowser-1.0.0.jar)" to="zzz\1"/>
				</chainedmapper>
			</mappedresources>
			<mappedresources enablemultiplemappings="false">				
				<restrict>
					<path refid="runtime.classpath"/>
					<type type="file"/>
				</restrict>
				<chainedmapper>
					<flattenmapper/>
					<regexpmapper from="^(?!LoboBrowser-1.0.0.jar)(.*)" to="\1"/>
				</chainedmapper>
			</mappedresources>

		</copy>

		<copy todir="stage/imports/comp-standard">
			<fileset dir="${src.dir}/decodes/tsdb/algo">
				<include name="*.xml"/>
			</fileset>
			<fileset dir="${project.dir}/install/imports/comp-standard">
				<include name="*.xml"/>
			</fileset>
		</copy>
		<copy todir="stage/imports/comp-cwms">
			<fileset dir="${src.dir}/decodes/cwms/rating">
				<include name="*.xml"/>
			</fileset>
			<fileset dir="${src.dir}/decodes/cwms/validation">
				<include name="*.xml"/>
			</fileset>
			<fileset dir="${src.dir}/decodes/tsdb/algo">
				<include name="ExpressionParserAlgorithm.xml"/>
			</fileset>
		</copy>
		<copy todir="stage/imports/updates">
			<fileset dir="${project.dir}/install/imports/updates">
				<include name="*.xml"/>
			</fileset>
		</copy>

		<copy todir="stage">
			<fileset dir="${project.dir}/izpack">
				<include name="opendcs-${MAJ_VER}-${MIN_VER}.xml"/>
				<include name="*.txt"/>
				<include name="unixOpenDcsShortcutSpec.xml"/>
				<include name="winOpenDcsShortcutSpec.xml"/>
			</fileset>
			<fileset dir="${project.dir}/install">
				<include name="decodes.properties"/>
				<include name="computations.conf"/>
				<include name="LddsConnections"/>
			</fileset>
		</copy>

		<copy todir="stage/doc">
			<fileset dir="${project.dir}/doc">
				<include name="*.pdf"/>
				<include name="algorithms.txt"/>
			</fileset>
		</copy>
		<tar destfile="stage/doc.tar.gz" compression="gzip">
			<tarfileset dir="stage" includes="doc/**">
			</tarfileset>
		</tar>


		<copy todir="stage/poll">
			<fileset dir="${project.dir}/install/poll">
				<include name="*.poll"/>
			</fileset>
		</copy>

		<copy todir="stage">
			<fileset dir="${project.dir}/install/lrgs">
				<include name="archive"/>
				<include name="users"/>
				<include name="users/lrgsadmin"/>
				<include name="ddsrecv.conf"/>
				<include name="drgsconf.xml"/>
				<include name="drivers"/>
				<include name="lrgs.conf"/>
				<include name="netlist"/>
				<include name=".lrgs.passwd"/>
				<include name="lrgs.service"/>
			</fileset>
		</copy>

		<copy todir="stage/schema/cwms">
			<fileset dir="${project.dir}/schema/cwms"/>
		</copy>

		<copy todir="stage/schema/hdb">
			<fileset dir="${project.dir}/schema/hdb"/>
		</copy>

		<copy todir="stage/schema/opendcs-pg">
			<fileset dir="${project.dir}/schema/opendcs-pg"/>
		</copy>

		<copy todir="stage/schema/opendcs-oracle">
			<fileset dir="${project.dir}/schema/opendcs-oracle"/>
		</copy>

		<copy todir="stage/schema/noaa">
			<fileset dir="${project.dir}/schema/noaa"/>
		</copy>

		<copy todir="stage/python">
			<fileset dir="${project.dir}/python"/>
		</copy>		

	</target>

	<!-- same as package, but remove libraries not needed by USACE or USBR -->
	<target name="nonfed" depends="stage">
		<delete dir="stage/dep/Lib"/>
		<delete file="stage/dep/jep-2.4.1.jar"/>
		<delete file="stage/dep/jython-2.7.2.jar"/>
		<delete file="stage/dep/xmlparserv2-12.1.0.2.jar"/>
		<delete file="stage/dep/Cobra.jar"/>
		<!-- Invokes izpack to build installable package with defaults for CWMS -->
		<izpack input="${project.dir}/izpack/opendcs-install.xml"
				output="stage/opendcs-nf-${version}.jar"
				installerType="standard"
				basedir="stage"
				izPackDir="${izpack.dir}">
			<property name="version" value="${version}"/>
			<property name="hdb.preselect" value="no"/>
		</izpack>
	</target>

	<!-- same as nonfed, but includes OpenTSDB and computation files -->
	<target name="opendcs" depends="stage,izpack.dependencies">
		<!-- Invokes izpack to build installable package with defaults for CWMS -->		
		<property name="hdb.preselect" value="no"/>
		<izpack input="${project.dir}/izpack/opendcs-install.xml"
				output="stage/opendcs-ot-${version}.jar"
				installerType="standard"
				inheritAll="true"
				basedir="stage"
				izPackDir="${izpack.dir}">
			
		</izpack>
	</target>

	<!-- same as OpenTSDB, but HDB package is preselected, needed for headless install -->
	<target name="hdb" depends="stage,izpack.dependencies">
		<!-- Invokes izpack to build installable package with defaults for CWMS -->
		<property name="hdb.preselect" value="yes"/>
		<izpack input="${project.dir}/izpack/opendcs-install.xml"
				output="stage/opendcs-hdb-${version}.jar"
				installerType="standard"
				inheritAll="true"
				basedir="stage"
				izPackDir="${izpack.dir}">
		</izpack>
	</target>

	<target name="cwmstar" depends="stage">
		<delete file="stage/dep/ojdbc8.jar"/>
		<delete file="stage/dep/ojdbc6.jar"/>
		<delete dir="stage/dep/IzPack-4.3.3"/>
		<delete>
			<fileset dir="stage/bin" includes="*.bat"/>
			<fileset dir="stage" includes="unixOpenDcsShortcutSpec.xml,winOpenDcsShortcutSpec.xml"/>
			<fileset dir="stage" includes="dospath.txt,opendcs-${MAJ_VER}-${MIN_VER}.xml,readme.txt,LddsConnections"/>
		</delete>
		<move file="stage/lrgs.conf" tofile="stage/lrgs.conf.sample"/>
		<move file="stage/ddsrecv.conf" tofile="stage/ddsrecv.conf.sample"/>
		<move file="stage/decodes.properties" tofile="stage/decodes.properties.sample"/>
		<move file="stage/drgsconf.xml" tofile="stage/drgsconf.xml.sample"/>
		<move file="stage/edit-db" tofile="stage/edit-db.init"/>
		<move file="stage/users" tofile="stage/users.init"/>
		<replace dir="stage/bin" token="%INSTALL_PATH" value="$DCSTOOL_HOME"/>
		<tar destfile="opendcs-cwms-${MAJ_VER}-${MIN_VER}-${RCNUM}.tgz" compression="gzip">
			<tarfileset dir="stage">
				<exclude name="bin/*"/>
				<exclude name="schema/cwms/createDb.sh"/>
				<exclude name="schema/cwms/importDecodesTemplate.sh"/>
				<exclude name="schema/cwms/createDefinesSql.sh"/>
				<exclude name="schema/cwms/createTableSpaces.sh"/>
				<exclude name="doc.tar.gz"/>
				<exclude name="icons.tar.gz"/>
			</tarfileset>
			<tarfileset dir="stage/bin" filemode="755" prefix="bin"/>
			<tarfileset file="stage/schema/cwms/createDb.sh" filemode="755" prefix="schema/cwms"/>
			<tarfileset file="stage/schema/cwms/importDecodesTemplate.sh" filemode="755" prefix="schema/cwms"/>
			<tarfileset file="stage/schema/cwms/createDefinesSql.sh" filemode="755" prefix="schema/cwms"/>
			<tarfileset file="stage/schema/cwms/createTableSpaces.sh" filemode="755" prefix="schema/cwms"/>

		</tar>
	</target>

	<path id="dcpmon.class.path">
		<pathelement path="${build.classes}/"/>
		<pathelement path="${env.CATALINA_HOME}/lib/servlet-api.jar"/>
		<fileset dir="${dcpmon.dir}/WebContent/WEB-INF/lib">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<path id="hydrojson.class.path">
		<pathelement path="${build.classes}/"/>
		<pathelement path="${env.CATALINA_HOME}/lib/servlet-api.jar"/>
		<fileset dir="${hydrojson.dir}/WebContent/WEB-INF/lib">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<target name="dcpmon" depends="jar">

		<mkdir dir="stage/dcpmon-build"/>
		<mkdir dir="stage/dcpmon-build/war-distro"/>
		<copy todir="stage/dcpmon-build/war-distro">
			<fileset dir="${dcpmon.dir}/WebContent"/>
		</copy>
		<mkdir dir="stage/dcpmon-build/war-custom"/>
		<copy todir="stage/dcpmon-build/war-custom">
			<fileset dir="${dcpmon.dir}/install/war-custom"/>
		</copy>
		<mkdir dir="stage/dcpmon-build/war-distro/WEB-INF/classes"/>
		<copy todir="stage/dcpmon-build/war-distro/WEB-INF/lib" file="build/lib/opendcs.jar" overwrite="true"/>
		<javac debug="true" destdir="stage/dcpmon-build/war-distro/WEB-INF/classes"
			target="1.7" source="1.7">
			<src path="${dcpmon.dir}/src"/>
			<classpath refid="dcpmon.class.path"/>
		</javac>
		<copy todir="stage/dcpmon-build" file="${dcpmon.dir}/install/makeDcpmon.sh"/>
		<copy todir="stage/dcpmon-build" file="${dcpmon.dir}/install/README"/>
		<tar tarfile="stage/dcpmon-build-${MAJ_VER}-${MIN_VER}-${RCNUM}.tgz"
			basedir="stage"
			includes="dcpmon-build/**"
			compression="gzip"/>
	</target>

	<target name="hydrojson" depends="jar">

		<mkdir dir="stage/hydrojson-build"/>
		<mkdir dir="stage/hydrojson-build/war-distro"/>
		<copy todir="stage/hydrojson-build/war-distro">
			<fileset dir="${hydrojson.dir}/WebContent"/>
		</copy>
		<mkdir dir="stage/hydrojson-build/war-custom"/>
		<copy todir="stage/hydrojson-build/war-custom">
			<fileset dir="${hydrojson.dir}/install/war-custom"/>
		</copy>
		<mkdir dir="stage/hydrojson-build/war-distro/WEB-INF/classes"/>
		<copy todir="stage/hydrojson-build/war-distro/WEB-INF/lib" file="build/lib/opendcs.jar" overwrite="true"/>
		<javac debug="true" destdir="stage/hydrojson-build/war-distro/WEB-INF/classes"
			target="1.7" source="1.7">
			<src path="${hydrojson.dir}/src"/>
			<classpath refid="hydrojson.class.path"/>
		</javac>
		<copy todir="stage/hydrojson-build" file="${hydrojson.dir}/install/makehydrojson.sh"/>
		<copy todir="stage/hydrojson-build" file="${hydrojson.dir}/install/README"/>
		<tar tarfile="stage/hydrojson-build-${MAJ_VER}-${MIN_VER}-${RCNUM}.tgz"
			basedir="stage"
			includes="hydrojson-build/**"
			compression="gzip"/>
	</target>

	<macrodef name="cpentries">
		<sequential>
			<classpathentry type="lib" path=""/>
		</sequential>
	</macrodef>

	<target name="eclipse-ide-files" depends="common.resolve">
		<!-- 
			Derived Directly from Mark O'Connors stackoverflow answer. Thank you for
			coming up with this!
			https://stackoverflow.com/a/11617592
		-->
		<!-- resolve -->		
		
		<taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="groovy.classpath"/>

		<groovy>		
			import groovy.xml.MarkupBuilder
		
			//
			// Generate the project file
			//
			project.log("Creating .project")
		
			new File(".project").withWriter { writer ->
				def xml = new MarkupBuilder(writer)
		
				xml.projectDescription() {
					name(project.name)
					comment()
					projects()
					buildSpec() {
						buildCommand() {
							name("org.eclipse.jdt.core.javabuilder")
							arguments()
						}
						buildCommand() {
							name("org.eclipse.ui.externaltools.ExternalToolBuilder")
							triggers("full,incremental")
							arguments() {
								dictionary() {
									key("LaunchConfigHandle")
			                  		value("&lt;project&gt;/.externalToolBuilders/jar.launch")
								}
							}
						}
					}
					natures() {
						nature("org.eclipse.jdt.core.javanature")
					}
				}
			}
		
			//
			// Generate the classpath file
			//
			// The "lib" classpathentry fields are populated using the ivy artifact report
			//
			project.log("Creating .classpath")
		
			new File(".classpath").withWriter { writer ->
				def xml = new MarkupBuilder(writer)
		
				xml.classpath() {
					classpathentry(kind:"src",    path:"src/main/java", output="bin/main")
					classpathentry(kind:"src",    path:"src/main/resources", output="bin/main")
					classpathentry(kind:"src",    path:"src/test/java", output="bin/test")					
					classpathentry(kind:"output", path:"bin")
					classpathentry(kind:"con",    path:"org.eclipse.jdt.launching.JRE_CONTAINER")
		
					project.getReference("runtime.classpath").each {
						classpathentry(kind:"lib", path:it)
					}

					project.getReference("test.classpath").each {
						classpathentry(kind:"lib", path:it)
					}
				}
			}
		</groovy>
        <mkdir dir=".externalToolBuilders"/>
        <mkdir dir=".settings"/>
        <copy file="ide-support/eclipse/jar.launch" todir=".externalToolBuilders"/>
        <copy file="ide-support/eclipse/org.eclipse.jdt.core.prefs" todir=".settings"/>
        <echo>
            As it is impossible to know everyone's configuration and preferences this target does the bear minimum 
            to get Eclipse going. You will have to do a "build all" or run ant jar on the command line to make
            sure dependencies are in place.

            The project currently requires Java 8 due to a dependencies on tools.jar. It is left to the eclipse user
            to make sure a JDK is available and configured correctly for that need.
        </echo>
	</target>
</project>
